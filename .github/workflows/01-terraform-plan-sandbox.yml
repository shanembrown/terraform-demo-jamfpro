# ref: https://sentenz.github.io/convention/convention/conventional-commits/
name: "01 - terraform speculative plan: sandbox"

on:
  workflow_dispatch:
  push:
    branches:
      - 'feat-*'
      - 'fix-*'
      - 'docs-*'
      - 'style-*'
      - 'refactor-*'
      - 'test-*'
      - 'chore-*'
      - 'build-*'
      - 'ci-*'
      - 'perf-*'
    paths:
      - '**/*.tf'

env:
  TF_CLOUD_ORGANIZATION: "deploymenttheory"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "terraform-jamfpro-sandbox"
  CONFIG_DIRECTORY: "workload/terraform/jamfpro"

permissions:
  contents: write
  id-token: write
  pull-requests: write
  
jobs:
  branch-check:
    if: github.event_name == 'workflow_dispatch' # only need to check branch for manual triggers
    name: "branch check"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - name: Extract branch name
        id: extract_branch
        run: echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        
      - name: Validate Branch Name
        run: |
          branch="${{ steps.extract_branch.outputs.branch }}"
          if [[ "$branch" =~ ^(feat|fix|docs|style|refactor|test|chore|build|ci|perf)- ]]; then
            echo "Success: Branch name '$branch' is valid."
            exit 0
          else
            echo "Error: Branch name must start with 'feat-', 'fix-', 'docs-', 'style-', 'refactor-', 'test-', 'chore-', 'build-', 'ci-', or 'perf-'"
            exit 1
          fi

  terraform-plan:
    uses: ./.github/workflows/terraform-plan.yml
    with:
      tf_cloud_organization: "deploymenttheory"
      tf_workspace: "terraform-jamfpro-sandbox" 
      target_environment: "sandbox"
      debug: true
      config_directory: "workload/terraform/jamfpro"
      release_version: ${{ github.ref_name }}
    secrets:
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  
  update-pr:
    needs: terraform-plan
    runs-on: ubuntu-latest
    steps:
      - name: Create or Update PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            const base = 'sandbox';
            
            // Check if PR already exists
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${branch}`,
              base: base,
              state: 'open'
            });
            
            let pr;
            if (prs.length === 0) {
              // Create new PR
              const { data: newPr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Terraform changes from ${branch}`,
                head: branch,
                base: base,
                body: 'This PR contains Terraform changes.'
              });
              pr = newPr;
            } else {
              pr = prs[0];
            }
            
            // Add Terraform plan results to PR
            const planOutput = `#### Terraform Plan Results
            \`\`\`
            Plan: ${{ needs.terraform-plan.outputs.add }} to add, ${{ needs.terraform-plan.outputs.change }} to change, ${{ needs.terraform-plan.outputs.destroy }} to destroy.
            \`\`\`
            [View full plan details](${{ needs.terraform-plan.outputs.run_link }})
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: planOutput
            });