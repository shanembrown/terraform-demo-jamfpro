name: Terraform Apply

on:
  workflow_call:
    inputs:
      tf_cloud_organization:
        required: true
        type: string
      tf_workspace:
        required: true
        type: string
      config_directory:
        required: true
        type: string
      debug:
        required: false
        type: boolean
        default: false
    secrets:
      TF_API_TOKEN:
        required: true

env:
  CONFIG_DIRECTORY: ${{ inputs.config_directory }}
  TF_CLOUD_ORGANIZATION: ${{ inputs.tf_cloud_organization }}
  TF_WORKSPACE: ${{ inputs.tf_workspace }}

jobs:
  terraform-apply:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7
        
      - name: Harden Runner
        uses: step-security/harden-runner@v2.9.1
        with:
          egress-policy: audit

      - name: Set TF_API_TOKEN as environment variable
        run: echo "TF_API_TOKEN=${{ secrets.TF_API_TOKEN }}" >> $GITHUB_ENV
      
      - name: Verify Terraform Cloud API Token
        if: ${{ inputs.debug }}
        run: |
          if [ -z "$TF_API_TOKEN" ]; then
            echo "Error: TF_API_TOKEN is not set"
            exit 1
          else
            echo "TF_API_TOKEN is set (value hidden for security)"
          fi
      
      - name: Check Workspace Existence
        if: ${{ inputs.debug }}
        run: |
          response=$(curl -s \
            --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
            --header "Content-Type: application/vnd.api+json" \
            "https://app.terraform.io/api/v2/organizations/$TF_CLOUD_ORGANIZATION/workspaces/$TF_WORKSPACE")
          
          if echo $response | grep -q "Not found"; then
            echo "Error: Workspace $TF_WORKSPACE not found in organization $TF_CLOUD_ORGANIZATION"
            exit 1
          else
            echo "Workspace $TF_WORKSPACE exists in organization $TF_CLOUD_ORGANIZATION"
          fi

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.1
        id: apply-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}

      - name: Create Apply Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.1
        id: apply-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}

      - name: Apply
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.3.1
        if: fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable
        id: apply
        with:
          run: ${{ steps.apply-run.outputs.run_id }}
          comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"

      - name: Show Apply Output
        if: ${{ inputs.debug }}
        run: |
          echo "Apply Run ID: ${{ steps.apply-run.outputs.run_id }}"
          echo "Apply Status: ${{ steps.apply.outcome }}"
          echo "Configuration Version: ${{ fromJSON(steps.apply-run.outputs.payload).data.relationships.configuration-version.data.id }}"
          echo "Workspace ID: ${{ fromJSON(steps.apply-run.outputs.payload).data.relationships.workspace.data.id }}"
          echo "Created At: ${{ fromJSON(steps.apply-run.outputs.payload).data.attributes.created-at }}"
          echo "Status: ${{ fromJSON(steps.apply-run.outputs.payload).data.attributes.status }}"
          echo "Is Confirmable: ${{ fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable }}"
          echo "Is Cancelable: ${{ fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsCancelable }}"
          echo "Plan Only: ${{ fromJSON(steps.apply-run.outputs.payload).data.attributes.plan-only }}"
          echo "Has Changes: ${{ fromJSON(steps.apply-run.outputs.payload).data.attributes.has-changes }}"
          echo "Terraform Version: ${{ fromJSON(steps.apply-run.outputs.payload).data.attributes.terraform-version }}"
          echo "Source: ${{ fromJSON(steps.apply-run.outputs.payload).data.attributes.source }}"
          echo "Trigger Reason: ${{ fromJSON(steps.apply-run.outputs.payload).data.attributes.trigger-reason }}"